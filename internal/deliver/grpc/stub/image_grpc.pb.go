// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: internal/deliver/grpc/proto/image.proto

package stub

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImageService_Create_FullMethodName    = "/ImageService/Create"
	ImageService_FindAll_FullMethodName   = "/ImageService/FindAll"
	ImageService_GetOne_FullMethodName    = "/ImageService/GetOne"
	ImageService_DeleteOne_FullMethodName = "/ImageService/DeleteOne"
	ImageService_Delete_FullMethodName    = "/ImageService/Delete"
)

// ImageServiceClient is the client API for ImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageServiceClient interface {
	Create(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageId, error)
	FindAll(ctx context.Context, in *ImageSpecification, opts ...grpc.CallOption) (*ImageHeaderListResponse, error)
	GetOne(ctx context.Context, in *ImageKey, opts ...grpc.CallOption) (*ImageDetailedReply, error)
	DeleteOne(ctx context.Context, in *ImageKey, opts ...grpc.CallOption) (*ImageEmptyReply, error)
	Delete(ctx context.Context, in *ImageSpecification, opts ...grpc.CallOption) (*ImagePruneReply, error)
}

type imageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageServiceClient(cc grpc.ClientConnInterface) ImageServiceClient {
	return &imageServiceClient{cc}
}

func (c *imageServiceClient) Create(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageId, error) {
	out := new(ImageId)
	err := c.cc.Invoke(ctx, ImageService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) FindAll(ctx context.Context, in *ImageSpecification, opts ...grpc.CallOption) (*ImageHeaderListResponse, error) {
	out := new(ImageHeaderListResponse)
	err := c.cc.Invoke(ctx, ImageService_FindAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) GetOne(ctx context.Context, in *ImageKey, opts ...grpc.CallOption) (*ImageDetailedReply, error) {
	out := new(ImageDetailedReply)
	err := c.cc.Invoke(ctx, ImageService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) DeleteOne(ctx context.Context, in *ImageKey, opts ...grpc.CallOption) (*ImageEmptyReply, error) {
	out := new(ImageEmptyReply)
	err := c.cc.Invoke(ctx, ImageService_DeleteOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) Delete(ctx context.Context, in *ImageSpecification, opts ...grpc.CallOption) (*ImagePruneReply, error) {
	out := new(ImagePruneReply)
	err := c.cc.Invoke(ctx, ImageService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageServiceServer is the server API for ImageService service.
// All implementations must embed UnimplementedImageServiceServer
// for forward compatibility
type ImageServiceServer interface {
	Create(context.Context, *ImageRequest) (*ImageId, error)
	FindAll(context.Context, *ImageSpecification) (*ImageHeaderListResponse, error)
	GetOne(context.Context, *ImageKey) (*ImageDetailedReply, error)
	DeleteOne(context.Context, *ImageKey) (*ImageEmptyReply, error)
	Delete(context.Context, *ImageSpecification) (*ImagePruneReply, error)
	mustEmbedUnimplementedImageServiceServer()
}

// UnimplementedImageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImageServiceServer struct {
}

func (UnimplementedImageServiceServer) Create(context.Context, *ImageRequest) (*ImageId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedImageServiceServer) FindAll(context.Context, *ImageSpecification) (*ImageHeaderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedImageServiceServer) GetOne(context.Context, *ImageKey) (*ImageDetailedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedImageServiceServer) DeleteOne(context.Context, *ImageKey) (*ImageEmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOne not implemented")
}
func (UnimplementedImageServiceServer) Delete(context.Context, *ImageSpecification) (*ImagePruneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedImageServiceServer) mustEmbedUnimplementedImageServiceServer() {}

// UnsafeImageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageServiceServer will
// result in compilation errors.
type UnsafeImageServiceServer interface {
	mustEmbedUnimplementedImageServiceServer()
}

func RegisterImageServiceServer(s grpc.ServiceRegistrar, srv ImageServiceServer) {
	s.RegisterService(&ImageService_ServiceDesc, srv)
}

func _ImageService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).Create(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageSpecification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).FindAll(ctx, req.(*ImageSpecification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).GetOne(ctx, req.(*ImageKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_DeleteOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).DeleteOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_DeleteOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).DeleteOne(ctx, req.(*ImageKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageSpecification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).Delete(ctx, req.(*ImageSpecification))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageService_ServiceDesc is the grpc.ServiceDesc for ImageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ImageService",
	HandlerType: (*ImageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ImageService_Create_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _ImageService_FindAll_Handler,
		},
		{
			MethodName: "GetOne",
			Handler:    _ImageService_GetOne_Handler,
		},
		{
			MethodName: "DeleteOne",
			Handler:    _ImageService_DeleteOne_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ImageService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/deliver/grpc/proto/image.proto",
}
